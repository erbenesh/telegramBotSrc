from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from aiogram.types.menu_button_commands import MenuButtonCommands

from aiogram import F, Router

import app.keyboards as kb
import app.database.requests as rq

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –µ–¥—ã', reply_markup=kb.main)


@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.', reply_markup=await kb.categories())


@router.message(F.text == '–û –Ω–∞—Å')
async def info(message: Message):
    await message.answer('–í–∫—É—Å –¥–µ—Ä–µ–≤–Ω–∏ - –Ω–∞—à–µ –Ω–µ–±–æ–ª—å—à–æ–µ —Å–µ–º–µ–π–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –≥. –¢–∞–∫–æ–≥–æ-—Ç–æ '
                         '–ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª., –≥–¥–µ —Å 2012 –≥–æ–¥–∞ –º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã '
                         'üè°\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n\nüßÄ –ü—Ä–æ–¥—É–∫—Ü–∏—é –Ω–∞—à–∏—Ö –∫–æ—Ä–æ–≤ –∏ –∫–æ–∑ - \n–æ—Ç –º–æ–ª–æ–∫–∞ –¥–æ —Å—ã—Ä–∞\n\nüçó –ú—è—Å–æ '
                         '–±—Ä–æ–π–ª–µ—Ä–æ–≤ –∏ –ø–µ—Ä–µ–ø–µ–ª–æ–≤\n\nü•ö –Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ –∏ –ø–µ—Ä–µ–ø–µ–ª–∏–Ω—ã–µ\n\n–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ \n–∏ '
                         '–æ–±–ª–∞—Å—Ç–∏ üì¶', reply_markup=kb.main)


@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def info(message: Message):
    await message.answer('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:', reply_markup=await kb.links())


@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await kb.items(callback.data.split('_')[1]))


@router.callback_query(F.data.startswith('item_'))
async def item(callback: CallbackQuery):
    item_data = await rq.get_item(callback.data.split('_')[1])
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä')
    await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item_data.name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}\n\n–¶–µ–Ω–∞: {item_data.price}—Ä—É–±.', reply_markup=await kb.update_case())


@router.callback_query(F.data.startswith('update_case'))
async def upd_case(callback: CallbackQuery):
    await callback.answer('–¢–æ–≤–∞—Ä –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')


@router.callback_query(F.data.startswith('to_main'))
async def to_main(callback: CallbackQuery):
    await callback.answer('–ü–µ—Ä–µ—à–ª–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.', reply_markup=await kb.categories())


@router.callback_query(F.data.startswith('link_'))
async def links_sm(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ')
